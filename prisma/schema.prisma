// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
   id              String @id @default(auto()) @map("_id") @db.ObjectId
  //  most of it is optional as we included google login and github login
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId

  //  relation
  accounts Account[]
  listings Listing[]
  reservations Reservation[]

}

model Account{
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  userId             String   @db.ObjectId

  // reations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // making unique combination of two field above 
  @@unique([provider, providerAccountId])
}


model Listing {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageSrc       String
  createdAt      DateTime @default(now())
  category       String
  roomCount      Int
  bathroomCount  Int
  guestCount     Int
  locationValue  String
  price          Int
  userId         String @db.ObjectId

// Realtion
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]

}

model Reservation {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  startDate     DateTime
  endDate       DateTime
  totalPrice    Int
  createdAt     DateTime @default(now())
  userId        String @db.ObjectId
  listingId     String @db.ObjectId  

  // realtions
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
}



